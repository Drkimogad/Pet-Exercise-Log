"use strict";

/* ==================== */
/*  Core Functionality  */
/* ==================== */
let deferredPrompt;

window.addEventListener('beforeinstallprompt', (e) => {
  e.preventDefault();
  deferredPrompt = e;
  setTimeout(() => deferredPrompt?.prompt(), 2000);
});

function registerServiceWorker() {
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker.register('/service-worker.js')
      .then(reg => console.log('SW registered:', reg.scope))
      .catch(err => console.error('SW failed:', err));
  }
}

/* ==================== */
/*  Auth Module         */
/* ==================== */
const Auth = (function() {
  // ... (keep your existing auth code unchanged) ...
  return { showAuth, logout };
})();

/* ==================== */
/*  Enhanced PetEntry   */
/* ==================== */
const PetEntry = (function() {
  const ACTIVITY_ICONS = {
    fetch: "🥎", swimming: "🏊", tug: "🪢", running: "🏃", agility: "⛳"
  };

  function getPets() {
    return JSON.parse(localStorage.getItem('pets') || []).map(pet => ({
      weightHistory: [],
      favoriteActivities: [],
      missedDays: [],
      monthlyGoal: 30,
      ...pet
    }));
  }

  function savePets(pets) {
    localStorage.setItem('pets', JSON.stringify(pets));
  }

  function handleFormSubmit(e) {
    e.preventDefault();
    const formData = new FormData(e.target);
    const pets = getPets();
    const petId = formData.get('petId') || generateId();
    
    const pet = {
      id: petId,
      name: formData.get('petName'),
      image: formData.get('petImage') || '/images/default-pet.png',
      bodyCondition: formData.get('bodyCondition'),
      weightHistory: [{
        date: new Date().toISOString().split('T')[0],
        kg: parseFloat(formData.get('currentWeight')),
        condition: formData.get('bodyCondition')
      }],
      favoriteActivities: Array.from(formData.getAll('favoriteActivities')),
      monthlyGoal: parseInt(formData.get('monthlyGoal')),
      exercises: [] // Populated separately
    };
    
    savePets(pets.filter(p => p.id !== petId).concat(pet));
    renderProfiles();
  }

  function generateId() {
    return Math.random().toString(36).substring(2, 9);
  }

  function renderProfiles() {
    const pets = getPets();
    document.getElementById('saved-profiles').innerHTML = pets.map(pet => `
      <div class="pet-profile" data-id="${pet.id}">
        <img src="${pet.image}" alt="${pet.name}">
        <h3>${pet.name}</h3>
        <div class="activity-summary">${getLastActivity(pet)}</div>
        <div class="favorites">
          ${pet.favoriteActivities?.map(a => ACTIVITY_ICONS[a] || a).join(' ')}
        </div>
        <div class="tips">${generateTips(pet).map(t => `<p>${t}</p>`).join('')}</div>
        <button onclick="shareProfile('${pet.id}')">Share</button>
        <img src="${generateQR(pet.id)}" class="qr-code">
      </div>
    `).join('');
  }

  function generateTips(pet) {
    const tips = [];
    if (pet.bodyCondition === "obese") tips.push("🐕 Increase walk duration");
    if (pet.energyLevel === "low") tips.push("⚡ Try interactive toys");
    return tips.slice(0, 3);
  }

  function getLastActivity(pet) {
    if (!pet.exercises?.length) return "No records";
    const last = pet.exercises.reduce((a, b) => 
      new Date(a.date) > new Date(b.date) ? a : b
    );
    return `Last: ${last.type} ${last.duration}min`;
  }

  return {
    handleFormSubmit,
    renderProfiles,
    getPets
  };
})();

/* ==================== */
/*  QR Code Generation  */
/* ==================== */
function generateQR(petId) {
  const canvas = document.createElement('canvas');
  canvas.width = 150;
  canvas.height = 150;
  const ctx = canvas.getContext('2d');
  
  // Simple pattern (replace with library for real QR)
  ctx.fillStyle = '#000';
  for (let i = 0; i < 100; i++) {
    ctx.fillRect(
      Math.floor(Math.random() * 150),
      Math.floor(Math.random() * 150),
      3, 3
    );
  }
  
  return canvas.toDataURL();
}

/* ==================== */
/*  Sharing Function    */
/* ==================== */
function shareProfile(petId) {
  const pet = PetEntry.getPets().find(p => p.id === petId);
  if (navigator.share) {
    navigator.share({
      title: `${pet.name}'s Profile`,
      text: `Check out ${pet.name}'s health stats!`,
      url: `${window.location.href}#pet=${petId}`
    });
  } else {
    prompt("Copy profile link:", `${window.location.href}#pet=${petId}`);
  }
}

/* ==================== */
/*  Weight Tracker      */
/* ==================== */
const WeightTracker = {
  renderChart: (petId) => {
    const pet = PetEntry.getPets().find(p => p.id === petId);
    const ctx = document.createElement('canvas').getContext('2d');
    
    new Chart(ctx, {
      type: 'line',
      data: {
        labels: pet.weightHistory.map(e => e.date),
        datasets: [{
          label: 'Weight (kg)',
          data: pet.weightHistory.map(e => e.kg),
          borderColor: '#4bc0c0'
        }]
      }
    });
    return ctx.canvas;
  }
};

/* ==================== */
/*  Initialize App      */
/* ==================== */
document.addEventListener("DOMContentLoaded", () => {
  registerServiceWorker();
  if (sessionStorage.getItem('user')) {
    PetEntry.renderProfiles();
  } else {
    Auth.showAuth();
  }
});
